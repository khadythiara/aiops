input {
  file {
    path => "/app/logs/app.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }

  file {
    path => "/app/logs/anomalies.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
  }
}

filter {
  if "app.log" in [path] {

    # Supprimer les sÃ©quences ANSI (couleurs) dans les logs
    mutate {
      gsub => ["message", "\e\[[0-9;]*m", ""]
    }

    # Extraire niveau, module et message principal
    grok {
      match => {
        "message" => [
          "%{LOGLEVEL:level}:%{DATA:module}:%{GREEDYDATA:msg}",
          "%{GREEDYDATA:msg}"
        ]
      }
      tag_on_failure => ["_grokparsefailure"]
    }

    # Extraire timestamp dans msg si format [23/Jun/2025 03:26:53]
    grok {
      match => {
        "msg" => "\[%{HTTPDATE:timestamp}\]"
      }
      tag_on_failure => []
    }

    # Convertir timestamp extrait en @timestamp (sans ignore_failure)
    date {
      match => ["timestamp", "dd/MMM/YYYY HH:mm:ss", "dd/MMM/YYYY:HH:mm:ss", "ISO8601"]
      target => "@timestamp"
      timezone => "UTC"
    }
  }
}

output {
  if "app.log" in [path] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "flask-logs"
    }
    stdout { codec => rubydebug }
  }

  if ("anomalies.json" in [path]) and [anomaly] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "anomalies-logs"
    }
    stdout { codec => rubydebug }
  }
}
